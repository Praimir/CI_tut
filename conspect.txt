Что такое CI?
Это непрерывная интеграция
Позволяет безопастно вносить изменения что бы ничего не поломалось
В основе лежит система контроля версий(GIT) и тестирования (unittests и прочее)
Что происходит - проэкт растет - тесты растут, невыловленные или нестандартные ошибки могут накапливатся - в один момент раз - и все к чертям летит как в
анекдоте про бар тестера и где туалет
Задача CI - это тестирование вашего кода
Как только был сдела коммит  - это изменение тщательно тестируется и модно сразу проверить сломано или нет
Многие ситемы для CI, такие как Jenkins, Travis, Gitlab и т.д. умеют делать многое другое - развертывание(Deploy),
сборка, отчет, логирование...

Будем делать на Python + GitHub и гонять все локально.
Можно настраивать тесты по времени, коммит, через коммит и т.д.

Система будет выглядит как Монитор - мониторинг(кэп), тест-фовард и тест-экзекутор
Монитор - смотрит в саму репу и при коммите он подключается к форварду и тот в совю очередь идет к экзекутору
Это кор система. Сверху этого можно сделать свою билд-систему, систему развертки и т.д.

Сделаем это в распределительной системе(cluster). Это модно-молодежно плюс сейфово - если комп вдруг отвалился - то другой рабоатет

Как только будем писать кластер - то очевидно что каждый можуль будет работать на отдельной машине в сети - значит + соккеты
Соккеты плюс понимание процессов - это и есть основа кластера, которая позволит заархитектурить так что бы работало даже когда отваливается
К примеру Jenkins имеет фичи такие как востановление после падение - тут такого не будет, но сделать можно путем написания
сереализатора и автосейвов каждого n-секунд

И того 3 компонента - каждый из них будет общатся через сокеты и соответсвенно нужен функционал работы с сетью.
что бы не писать 3 раза одно - напием функционал отдельно
+ Баш скрипты

Начинаем с простого - пишем на одной машине - потом распределим

Создали репу и подключили гит - есть;
По идее CI должна мониторить эту репку локально и реагировать на комиты - за это и отвечает монитор

